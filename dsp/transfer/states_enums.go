// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums ./dsp/transfer/state.go

package transfer

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type State struct {
	state
}

type statesContainer struct {
	INITIAL    State
	REQUESTED  State
	STARTED    State
	SUSPENDED  State
	COMPLETED  State
	TERMINATED State
}

var States = statesContainer{
	INITIAL: State{
		state: initial,
	},
	REQUESTED: State{
		state: requested,
	},
	STARTED: State{
		state: started,
	},
	SUSPENDED: State{
		state: suspended,
	},
	COMPLETED: State{
		state: completed,
	},
	TERMINATED: State{
		state: terminated,
	},
}

func (c statesContainer) All() []State {
	return []State{
		c.INITIAL,
		c.REQUESTED,
		c.STARTED,
		c.SUSPENDED,
		c.COMPLETED,
		c.TERMINATED,
	}
}

var invalidState = State{}

func ParseState(a any) (State, error) {
	res := invalidState
	switch v := a.(type) {
	case State:
		return v, nil
	case []byte:
		res = stringToState(string(v))
	case string:
		res = stringToState(v)
	case fmt.Stringer:
		res = stringToState(v.String())
	case int:
		res = intToState(v)
	case int64:
		res = intToState(int(v))
	case int32:
		res = intToState(int(v))
	}
	return res, nil
}

func stringToState(s string) State {
	switch s {
	case "INITIAL":
		return States.INITIAL
	case "dspace:REQUESTED":
		return States.REQUESTED
	case "dspace:STARTED":
		return States.STARTED
	case "dspace:SUSPENDED":
		return States.SUSPENDED
	case "dspace:COMPLETED":
		return States.COMPLETED
	case "dspace:TERMINATED":
		return States.TERMINATED
	}
	return invalidState
}

func intToState(i int) State {
	if i < 0 || i >= len(States.All()) {
		return invalidState
	}
	return States.All()[i]
}

func ExhaustiveStates(f func(State)) {
	for _, p := range States.All() {
		f(p)
	}
}

var validStates = map[State]bool{
	States.INITIAL:    true,
	States.REQUESTED:  true,
	States.STARTED:    true,
	States.SUSPENDED:  true,
	States.COMPLETED:  true,
	States.TERMINATED: true,
}

func (p State) IsValid() bool {
	return validStates[p]
}

func (p State) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *State) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseState(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *State) Scan(value any) error {
	newp, err := ParseState(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p State) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[initial-0]
	_ = x[requested-1]
	_ = x[started-2]
	_ = x[suspended-3]
	_ = x[completed-4]
	_ = x[terminated-5]
}

const _states_name = "INITIALdspace:REQUESTEDdspace:STARTEDdspace:SUSPENDEDdspace:COMPLETEDdspace:TERMINATED"

var _states_index = [...]uint16{0, 7, 23, 37, 53, 69, 86}

func (i state) String() string {
	if i < 0 || i >= state(len(_states_index)-1) {
		return "states(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _states_name[_states_index[i]:_states_index[i+1]]
}
