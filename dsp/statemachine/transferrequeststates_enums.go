// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums transfer_request_state.go

package statemachine

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type TransferRequestState struct {
	transferRequestState
}

type transferrequeststatesContainer struct {
	TRANSFERINITIAL    TransferRequestState
	TRANSFERREQUESTED  TransferRequestState
	STARTED            TransferRequestState
	SUSPENDED          TransferRequestState
	COMPLETED          TransferRequestState
	TRANSFERTERMINATED TransferRequestState
}

var TransferRequestStates = transferrequeststatesContainer{
	TRANSFERINITIAL: TransferRequestState{
		transferRequestState: transferInitial,
	},
	TRANSFERREQUESTED: TransferRequestState{
		transferRequestState: transferRequested,
	},
	STARTED: TransferRequestState{
		transferRequestState: started,
	},
	SUSPENDED: TransferRequestState{
		transferRequestState: suspended,
	},
	COMPLETED: TransferRequestState{
		transferRequestState: completed,
	},
	TRANSFERTERMINATED: TransferRequestState{
		transferRequestState: transferTerminated,
	},
}

func (c transferrequeststatesContainer) All() []TransferRequestState {
	return []TransferRequestState{
		c.TRANSFERINITIAL,
		c.TRANSFERREQUESTED,
		c.STARTED,
		c.SUSPENDED,
		c.COMPLETED,
		c.TRANSFERTERMINATED,
	}
}

var invalidTransferRequestState = TransferRequestState{}

func ParseTransferRequestState(a any) (TransferRequestState, error) {
	res := invalidTransferRequestState
	switch v := a.(type) {
	case TransferRequestState:
		return v, nil
	case []byte:
		res = stringToTransferRequestState(string(v))
	case string:
		res = stringToTransferRequestState(v)
	case fmt.Stringer:
		res = stringToTransferRequestState(v.String())
	case int:
		res = intToTransferRequestState(v)
	case int64:
		res = intToTransferRequestState(int(v))
	case int32:
		res = intToTransferRequestState(int(v))
	}
	return res, nil
}

func stringToTransferRequestState(s string) TransferRequestState {
	switch s {
	case "INITIAL":
		return TransferRequestStates.TRANSFERINITIAL
	case "dspace:REQUESTED":
		return TransferRequestStates.TRANSFERREQUESTED
	case "dspace:STARTED":
		return TransferRequestStates.STARTED
	case "dspace:SUSPENDED":
		return TransferRequestStates.SUSPENDED
	case "dspace:COMPLETED":
		return TransferRequestStates.COMPLETED
	case "dspace:TERMINATED":
		return TransferRequestStates.TRANSFERTERMINATED
	}
	return invalidTransferRequestState
}

func intToTransferRequestState(i int) TransferRequestState {
	if i < 0 || i >= len(TransferRequestStates.All()) {
		return invalidTransferRequestState
	}
	return TransferRequestStates.All()[i]
}

func ExhaustiveTransferRequestStates(f func(TransferRequestState)) {
	for _, p := range TransferRequestStates.All() {
		f(p)
	}
}

var validTransferRequestStates = map[TransferRequestState]bool{
	TransferRequestStates.TRANSFERINITIAL:    true,
	TransferRequestStates.TRANSFERREQUESTED:  true,
	TransferRequestStates.STARTED:            true,
	TransferRequestStates.SUSPENDED:          true,
	TransferRequestStates.COMPLETED:          true,
	TransferRequestStates.TRANSFERTERMINATED: true,
}

func (p TransferRequestState) IsValid() bool {
	return validTransferRequestStates[p]
}

func (p TransferRequestState) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *TransferRequestState) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseTransferRequestState(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *TransferRequestState) Scan(value any) error {
	newp, err := ParseTransferRequestState(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p TransferRequestState) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[transferInitial-0]
	_ = x[transferRequested-1]
	_ = x[started-2]
	_ = x[suspended-3]
	_ = x[completed-4]
	_ = x[transferTerminated-5]
}

const _transferrequeststates_name = "INITIALdspace:REQUESTEDdspace:STARTEDdspace:SUSPENDEDdspace:COMPLETEDdspace:TERMINATED"

var _transferrequeststates_index = [...]uint16{0, 7, 23, 37, 53, 69, 86}

func (i transferRequestState) String() string {
	if i < 0 || i >= transferRequestState(len(_transferrequeststates_index)-1) {
		return "transferrequeststates(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _transferrequeststates_name[_transferrequeststates_index[i]:_transferrequeststates_index[i+1]]
}
