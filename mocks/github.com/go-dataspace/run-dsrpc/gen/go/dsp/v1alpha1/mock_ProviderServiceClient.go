// Code generated by mockery v2.42.0. DO NOT EDIT.

package dspv1alpha1

import (
	context "context"

	dspv1alpha1 "github.com/go-dataspace/run-dsrpc/gen/go/dsp/v1alpha1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockProviderServiceClient is an autogenerated mock type for the ProviderServiceClient type
type MockProviderServiceClient struct {
	mock.Mock
}

type MockProviderServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderServiceClient) EXPECT() *MockProviderServiceClient_Expecter {
	return &MockProviderServiceClient_Expecter{mock: &_m.Mock}
}

// GetCatalogue provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) GetCatalogue(ctx context.Context, in *dspv1alpha1.GetCatalogueRequest, opts ...grpc.CallOption) (*dspv1alpha1.GetCatalogueResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalogue")
	}

	var r0 *dspv1alpha1.GetCatalogueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.GetCatalogueRequest, ...grpc.CallOption) (*dspv1alpha1.GetCatalogueResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.GetCatalogueRequest, ...grpc.CallOption) *dspv1alpha1.GetCatalogueResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.GetCatalogueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.GetCatalogueRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_GetCatalogue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCatalogue'
type MockProviderServiceClient_GetCatalogue_Call struct {
	*mock.Call
}

// GetCatalogue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.GetCatalogueRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) GetCatalogue(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_GetCatalogue_Call {
	return &MockProviderServiceClient_GetCatalogue_Call{Call: _e.mock.On("GetCatalogue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_GetCatalogue_Call) Run(run func(ctx context.Context, in *dspv1alpha1.GetCatalogueRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_GetCatalogue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.GetCatalogueRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_GetCatalogue_Call) Return(_a0 *dspv1alpha1.GetCatalogueResponse, _a1 error) *MockProviderServiceClient_GetCatalogue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_GetCatalogue_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.GetCatalogueRequest, ...grpc.CallOption) (*dspv1alpha1.GetCatalogueResponse, error)) *MockProviderServiceClient_GetCatalogue_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataset provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) GetDataset(ctx context.Context, in *dspv1alpha1.GetDatasetRequest, opts ...grpc.CallOption) (*dspv1alpha1.GetDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataset")
	}

	var r0 *dspv1alpha1.GetDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.GetDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.GetDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.GetDatasetRequest, ...grpc.CallOption) *dspv1alpha1.GetDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.GetDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.GetDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_GetDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataset'
type MockProviderServiceClient_GetDataset_Call struct {
	*mock.Call
}

// GetDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.GetDatasetRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) GetDataset(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_GetDataset_Call {
	return &MockProviderServiceClient_GetDataset_Call{Call: _e.mock.On("GetDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_GetDataset_Call) Run(run func(ctx context.Context, in *dspv1alpha1.GetDatasetRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_GetDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.GetDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_GetDataset_Call) Return(_a0 *dspv1alpha1.GetDatasetResponse, _a1 error) *MockProviderServiceClient_GetDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_GetDataset_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.GetDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.GetDatasetResponse, error)) *MockProviderServiceClient_GetDataset_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) Ping(ctx context.Context, in *dspv1alpha1.PingRequest, opts ...grpc.CallOption) (*dspv1alpha1.PingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *dspv1alpha1.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.PingRequest, ...grpc.CallOption) (*dspv1alpha1.PingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.PingRequest, ...grpc.CallOption) *dspv1alpha1.PingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockProviderServiceClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.PingRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) Ping(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_Ping_Call {
	return &MockProviderServiceClient_Ping_Call{Call: _e.mock.On("Ping",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_Ping_Call) Run(run func(ctx context.Context, in *dspv1alpha1.PingRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.PingRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_Ping_Call) Return(_a0 *dspv1alpha1.PingResponse, _a1 error) *MockProviderServiceClient_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_Ping_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.PingRequest, ...grpc.CallOption) (*dspv1alpha1.PingResponse, error)) *MockProviderServiceClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PublishDataset provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) PublishDataset(ctx context.Context, in *dspv1alpha1.PublishDatasetRequest, opts ...grpc.CallOption) (*dspv1alpha1.PublishDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishDataset")
	}

	var r0 *dspv1alpha1.PublishDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.PublishDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.PublishDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.PublishDatasetRequest, ...grpc.CallOption) *dspv1alpha1.PublishDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.PublishDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.PublishDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_PublishDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishDataset'
type MockProviderServiceClient_PublishDataset_Call struct {
	*mock.Call
}

// PublishDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.PublishDatasetRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) PublishDataset(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_PublishDataset_Call {
	return &MockProviderServiceClient_PublishDataset_Call{Call: _e.mock.On("PublishDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_PublishDataset_Call) Run(run func(ctx context.Context, in *dspv1alpha1.PublishDatasetRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_PublishDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.PublishDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_PublishDataset_Call) Return(_a0 *dspv1alpha1.PublishDatasetResponse, _a1 error) *MockProviderServiceClient_PublishDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_PublishDataset_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.PublishDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.PublishDatasetResponse, error)) *MockProviderServiceClient_PublishDataset_Call {
	_c.Call.Return(run)
	return _c
}

// SuspendPublishedDataset provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) SuspendPublishedDataset(ctx context.Context, in *dspv1alpha1.SuspendPublishedDatasetRequest, opts ...grpc.CallOption) (*dspv1alpha1.SuspendPublishedDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SuspendPublishedDataset")
	}

	var r0 *dspv1alpha1.SuspendPublishedDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.SuspendPublishedDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.SuspendPublishedDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.SuspendPublishedDatasetRequest, ...grpc.CallOption) *dspv1alpha1.SuspendPublishedDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.SuspendPublishedDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.SuspendPublishedDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_SuspendPublishedDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuspendPublishedDataset'
type MockProviderServiceClient_SuspendPublishedDataset_Call struct {
	*mock.Call
}

// SuspendPublishedDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.SuspendPublishedDatasetRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) SuspendPublishedDataset(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_SuspendPublishedDataset_Call {
	return &MockProviderServiceClient_SuspendPublishedDataset_Call{Call: _e.mock.On("SuspendPublishedDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_SuspendPublishedDataset_Call) Run(run func(ctx context.Context, in *dspv1alpha1.SuspendPublishedDatasetRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_SuspendPublishedDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.SuspendPublishedDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_SuspendPublishedDataset_Call) Return(_a0 *dspv1alpha1.SuspendPublishedDatasetResponse, _a1 error) *MockProviderServiceClient_SuspendPublishedDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_SuspendPublishedDataset_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.SuspendPublishedDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.SuspendPublishedDatasetResponse, error)) *MockProviderServiceClient_SuspendPublishedDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UnpublishDataset provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) UnpublishDataset(ctx context.Context, in *dspv1alpha1.UnpublishDatasetRequest, opts ...grpc.CallOption) (*dspv1alpha1.UnpublishDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnpublishDataset")
	}

	var r0 *dspv1alpha1.UnpublishDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.UnpublishDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.UnpublishDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.UnpublishDatasetRequest, ...grpc.CallOption) *dspv1alpha1.UnpublishDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.UnpublishDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.UnpublishDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_UnpublishDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpublishDataset'
type MockProviderServiceClient_UnpublishDataset_Call struct {
	*mock.Call
}

// UnpublishDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.UnpublishDatasetRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) UnpublishDataset(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_UnpublishDataset_Call {
	return &MockProviderServiceClient_UnpublishDataset_Call{Call: _e.mock.On("UnpublishDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_UnpublishDataset_Call) Run(run func(ctx context.Context, in *dspv1alpha1.UnpublishDatasetRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_UnpublishDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.UnpublishDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_UnpublishDataset_Call) Return(_a0 *dspv1alpha1.UnpublishDatasetResponse, _a1 error) *MockProviderServiceClient_UnpublishDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_UnpublishDataset_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.UnpublishDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.UnpublishDatasetResponse, error)) *MockProviderServiceClient_UnpublishDataset_Call {
	_c.Call.Return(run)
	return _c
}

// UnsuspendPublishedDataset provides a mock function with given fields: ctx, in, opts
func (_m *MockProviderServiceClient) UnsuspendPublishedDataset(ctx context.Context, in *dspv1alpha1.UnsuspendPublishedDatasetRequest, opts ...grpc.CallOption) (*dspv1alpha1.UnsuspendPublishedDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnsuspendPublishedDataset")
	}

	var r0 *dspv1alpha1.UnsuspendPublishedDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.UnsuspendPublishedDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.UnsuspendPublishedDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha1.UnsuspendPublishedDatasetRequest, ...grpc.CallOption) *dspv1alpha1.UnsuspendPublishedDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha1.UnsuspendPublishedDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha1.UnsuspendPublishedDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderServiceClient_UnsuspendPublishedDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsuspendPublishedDataset'
type MockProviderServiceClient_UnsuspendPublishedDataset_Call struct {
	*mock.Call
}

// UnsuspendPublishedDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha1.UnsuspendPublishedDatasetRequest
//   - opts ...grpc.CallOption
func (_e *MockProviderServiceClient_Expecter) UnsuspendPublishedDataset(ctx interface{}, in interface{}, opts ...interface{}) *MockProviderServiceClient_UnsuspendPublishedDataset_Call {
	return &MockProviderServiceClient_UnsuspendPublishedDataset_Call{Call: _e.mock.On("UnsuspendPublishedDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProviderServiceClient_UnsuspendPublishedDataset_Call) Run(run func(ctx context.Context, in *dspv1alpha1.UnsuspendPublishedDatasetRequest, opts ...grpc.CallOption)) *MockProviderServiceClient_UnsuspendPublishedDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha1.UnsuspendPublishedDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProviderServiceClient_UnsuspendPublishedDataset_Call) Return(_a0 *dspv1alpha1.UnsuspendPublishedDatasetResponse, _a1 error) *MockProviderServiceClient_UnsuspendPublishedDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderServiceClient_UnsuspendPublishedDataset_Call) RunAndReturn(run func(context.Context, *dspv1alpha1.UnsuspendPublishedDatasetRequest, ...grpc.CallOption) (*dspv1alpha1.UnsuspendPublishedDatasetResponse, error)) *MockProviderServiceClient_UnsuspendPublishedDataset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderServiceClient creates a new instance of MockProviderServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderServiceClient {
	mock := &MockProviderServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
