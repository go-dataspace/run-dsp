// Code generated by mockery v2.51.0. DO NOT EDIT.

package dspv1alpha2

import (
	context "context"

	dspv1alpha2 "github.com/go-dataspace/run-dsrpc/gen/go/dsp/v1alpha2"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockContractServiceClient is an autogenerated mock type for the ContractServiceClient type
type MockContractServiceClient struct {
	mock.Mock
}

type MockContractServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractServiceClient) EXPECT() *MockContractServiceClient_Expecter {
	return &MockContractServiceClient_Expecter{mock: &_m.Mock}
}

// AcceptedReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) AcceptedReceived(ctx context.Context, in *dspv1alpha2.ContractServiceAcceptedReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceAcceptedReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptedReceived")
	}

	var r0 *dspv1alpha2.ContractServiceAcceptedReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceAcceptedReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceAcceptedReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceAcceptedReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceAcceptedReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceAcceptedReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceAcceptedReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_AcceptedReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptedReceived'
type MockContractServiceClient_AcceptedReceived_Call struct {
	*mock.Call
}

// AcceptedReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceAcceptedReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) AcceptedReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_AcceptedReceived_Call {
	return &MockContractServiceClient_AcceptedReceived_Call{Call: _e.mock.On("AcceptedReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_AcceptedReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceAcceptedReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_AcceptedReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceAcceptedReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_AcceptedReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceAcceptedReceivedResponse, _a1 error) *MockContractServiceClient_AcceptedReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_AcceptedReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceAcceptedReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceAcceptedReceivedResponse, error)) *MockContractServiceClient_AcceptedReceived_Call {
	_c.Call.Return(run)
	return _c
}

// AgreementReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) AgreementReceived(ctx context.Context, in *dspv1alpha2.ContractServiceAgreementReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceAgreementReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AgreementReceived")
	}

	var r0 *dspv1alpha2.ContractServiceAgreementReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceAgreementReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceAgreementReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceAgreementReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceAgreementReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceAgreementReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceAgreementReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_AgreementReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AgreementReceived'
type MockContractServiceClient_AgreementReceived_Call struct {
	*mock.Call
}

// AgreementReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceAgreementReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) AgreementReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_AgreementReceived_Call {
	return &MockContractServiceClient_AgreementReceived_Call{Call: _e.mock.On("AgreementReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_AgreementReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceAgreementReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_AgreementReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceAgreementReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_AgreementReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceAgreementReceivedResponse, _a1 error) *MockContractServiceClient_AgreementReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_AgreementReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceAgreementReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceAgreementReceivedResponse, error)) *MockContractServiceClient_AgreementReceived_Call {
	_c.Call.Return(run)
	return _c
}

// Configure provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) Configure(ctx context.Context, in *dspv1alpha2.ContractServiceConfigureRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceConfigureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 *dspv1alpha2.ContractServiceConfigureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceConfigureRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceConfigureResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceConfigureRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceConfigureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceConfigureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceConfigureRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type MockContractServiceClient_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceConfigureRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) Configure(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_Configure_Call {
	return &MockContractServiceClient_Configure_Call{Call: _e.mock.On("Configure",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_Configure_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceConfigureRequest, opts ...grpc.CallOption)) *MockContractServiceClient_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceConfigureRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_Configure_Call) Return(_a0 *dspv1alpha2.ContractServiceConfigureResponse, _a1 error) *MockContractServiceClient_Configure_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_Configure_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceConfigureRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceConfigureResponse, error)) *MockContractServiceClient_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizationReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) FinalizationReceived(ctx context.Context, in *dspv1alpha2.ContractServiceFinalizationReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceFinalizationReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FinalizationReceived")
	}

	var r0 *dspv1alpha2.ContractServiceFinalizationReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceFinalizationReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceFinalizationReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceFinalizationReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceFinalizationReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceFinalizationReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceFinalizationReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_FinalizationReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizationReceived'
type MockContractServiceClient_FinalizationReceived_Call struct {
	*mock.Call
}

// FinalizationReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceFinalizationReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) FinalizationReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_FinalizationReceived_Call {
	return &MockContractServiceClient_FinalizationReceived_Call{Call: _e.mock.On("FinalizationReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_FinalizationReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceFinalizationReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_FinalizationReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceFinalizationReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_FinalizationReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceFinalizationReceivedResponse, _a1 error) *MockContractServiceClient_FinalizationReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_FinalizationReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceFinalizationReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceFinalizationReceivedResponse, error)) *MockContractServiceClient_FinalizationReceived_Call {
	_c.Call.Return(run)
	return _c
}

// OfferReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) OfferReceived(ctx context.Context, in *dspv1alpha2.ContractServiceOfferReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceOfferReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OfferReceived")
	}

	var r0 *dspv1alpha2.ContractServiceOfferReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceOfferReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceOfferReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceOfferReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceOfferReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceOfferReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceOfferReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_OfferReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OfferReceived'
type MockContractServiceClient_OfferReceived_Call struct {
	*mock.Call
}

// OfferReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceOfferReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) OfferReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_OfferReceived_Call {
	return &MockContractServiceClient_OfferReceived_Call{Call: _e.mock.On("OfferReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_OfferReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceOfferReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_OfferReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceOfferReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_OfferReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceOfferReceivedResponse, _a1 error) *MockContractServiceClient_OfferReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_OfferReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceOfferReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceOfferReceivedResponse, error)) *MockContractServiceClient_OfferReceived_Call {
	_c.Call.Return(run)
	return _c
}

// RequestReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) RequestReceived(ctx context.Context, in *dspv1alpha2.ContractServiceRequestReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceRequestReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestReceived")
	}

	var r0 *dspv1alpha2.ContractServiceRequestReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceRequestReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceRequestReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceRequestReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceRequestReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceRequestReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceRequestReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_RequestReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestReceived'
type MockContractServiceClient_RequestReceived_Call struct {
	*mock.Call
}

// RequestReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceRequestReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) RequestReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_RequestReceived_Call {
	return &MockContractServiceClient_RequestReceived_Call{Call: _e.mock.On("RequestReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_RequestReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceRequestReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_RequestReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceRequestReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_RequestReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceRequestReceivedResponse, _a1 error) *MockContractServiceClient_RequestReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_RequestReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceRequestReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceRequestReceivedResponse, error)) *MockContractServiceClient_RequestReceived_Call {
	_c.Call.Return(run)
	return _c
}

// TerminationReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) TerminationReceived(ctx context.Context, in *dspv1alpha2.ContractServiceTerminationReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceTerminationReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminationReceived")
	}

	var r0 *dspv1alpha2.ContractServiceTerminationReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceTerminationReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceTerminationReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceTerminationReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceTerminationReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceTerminationReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceTerminationReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_TerminationReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminationReceived'
type MockContractServiceClient_TerminationReceived_Call struct {
	*mock.Call
}

// TerminationReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceTerminationReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) TerminationReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_TerminationReceived_Call {
	return &MockContractServiceClient_TerminationReceived_Call{Call: _e.mock.On("TerminationReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_TerminationReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceTerminationReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_TerminationReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceTerminationReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_TerminationReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceTerminationReceivedResponse, _a1 error) *MockContractServiceClient_TerminationReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_TerminationReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceTerminationReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceTerminationReceivedResponse, error)) *MockContractServiceClient_TerminationReceived_Call {
	_c.Call.Return(run)
	return _c
}

// VerificationReceived provides a mock function with given fields: ctx, in, opts
func (_m *MockContractServiceClient) VerificationReceived(ctx context.Context, in *dspv1alpha2.ContractServiceVerificationReceivedRequest, opts ...grpc.CallOption) (*dspv1alpha2.ContractServiceVerificationReceivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerificationReceived")
	}

	var r0 *dspv1alpha2.ContractServiceVerificationReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceVerificationReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceVerificationReceivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dspv1alpha2.ContractServiceVerificationReceivedRequest, ...grpc.CallOption) *dspv1alpha2.ContractServiceVerificationReceivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dspv1alpha2.ContractServiceVerificationReceivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dspv1alpha2.ContractServiceVerificationReceivedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContractServiceClient_VerificationReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerificationReceived'
type MockContractServiceClient_VerificationReceived_Call struct {
	*mock.Call
}

// VerificationReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dspv1alpha2.ContractServiceVerificationReceivedRequest
//   - opts ...grpc.CallOption
func (_e *MockContractServiceClient_Expecter) VerificationReceived(ctx interface{}, in interface{}, opts ...interface{}) *MockContractServiceClient_VerificationReceived_Call {
	return &MockContractServiceClient_VerificationReceived_Call{Call: _e.mock.On("VerificationReceived",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockContractServiceClient_VerificationReceived_Call) Run(run func(ctx context.Context, in *dspv1alpha2.ContractServiceVerificationReceivedRequest, opts ...grpc.CallOption)) *MockContractServiceClient_VerificationReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dspv1alpha2.ContractServiceVerificationReceivedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockContractServiceClient_VerificationReceived_Call) Return(_a0 *dspv1alpha2.ContractServiceVerificationReceivedResponse, _a1 error) *MockContractServiceClient_VerificationReceived_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContractServiceClient_VerificationReceived_Call) RunAndReturn(run func(context.Context, *dspv1alpha2.ContractServiceVerificationReceivedRequest, ...grpc.CallOption) (*dspv1alpha2.ContractServiceVerificationReceivedResponse, error)) *MockContractServiceClient_VerificationReceived_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContractServiceClient creates a new instance of MockContractServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractServiceClient {
	mock := &MockContractServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
